package model_Entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 13 08:21:48 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AttendenceEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlNo {
            public Object get(AttendenceEOImpl obj) {
                return obj.getSlNo();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setSlNo((Number)value);
            }
        }
        ,
        StudentId {
            public Object get(AttendenceEOImpl obj) {
                return obj.getStudentId();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setStudentId((Number)value);
            }
        }
        ,
        AttendenceDate {
            public Object get(AttendenceEOImpl obj) {
                return obj.getAttendenceDate();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setAttendenceDate((Date)value);
            }
        }
        ,
        Attendence {
            public Object get(AttendenceEOImpl obj) {
                return obj.getAttendence();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setAttendence((String)value);
            }
        }
        ,
        StudentName {
            public Object get(AttendenceEOImpl obj) {
                return obj.getStudentName();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setStudentName((String)value);
            }
        }
        ,
        Class1 {
            public Object get(AttendenceEOImpl obj) {
                return obj.getClass1();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setClass1((String)value);
            }
        }
        ,
        StudentsEO {
            public Object get(AttendenceEOImpl obj) {
                return obj.getStudentsEO();
            }

            public void put(AttendenceEOImpl obj, Object value) {
                obj.setStudentsEO((StudentsEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AttendenceEOImpl object);

        public abstract void put(AttendenceEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLNO = AttributesEnum.SlNo.index();
    public static final int STUDENTID = AttributesEnum.StudentId.index();
    public static final int ATTENDENCEDATE = AttributesEnum.AttendenceDate.index();
    public static final int ATTENDENCE = AttributesEnum.Attendence.index();
    public static final int STUDENTNAME = AttributesEnum.StudentName.index();
    public static final int CLASS1 = AttributesEnum.Class1.index();
    public static final int STUDENTSEO = AttributesEnum.StudentsEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AttendenceEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model_Entity.AttendenceEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for SlNo, using the alias name SlNo.
     * @return the SlNo
     */
    public Number getSlNo() {
        return (Number)getAttributeInternal(SLNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlNo.
     * @param value value to set the SlNo
     */
    public void setSlNo(Number value) {
        setAttributeInternal(SLNO, value);
    }

    /**
     * Gets the attribute value for StudentId, using the alias name StudentId.
     * @return the StudentId
     */
    public Number getStudentId() {
        return (Number)getAttributeInternal(STUDENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StudentId.
     * @param value value to set the StudentId
     */
    public void setStudentId(Number value) {
        setAttributeInternal(STUDENTID, value);
    }

    /**
     * Gets the attribute value for AttendenceDate, using the alias name AttendenceDate.
     * @return the AttendenceDate
     */
    public Date getAttendenceDate() {
        return (Date)getAttributeInternal(ATTENDENCEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttendenceDate.
     * @param value value to set the AttendenceDate
     */
    public void setAttendenceDate(Date value) {
        setAttributeInternal(ATTENDENCEDATE, value);
    }

    /**
     * Gets the attribute value for Attendence, using the alias name Attendence.
     * @return the Attendence
     */
    public String getAttendence() {
        return (String)getAttributeInternal(ATTENDENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attendence.
     * @param value value to set the Attendence
     */
    public void setAttendence(String value) {
        setAttributeInternal(ATTENDENCE, value);
    }

    /**
     * Gets the attribute value for StudentName, using the alias name StudentName.
     * @return the StudentName
     */
    public String getStudentName() {
        return (String)getAttributeInternal(STUDENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for StudentName.
     * @param value value to set the StudentName
     */
    public void setStudentName(String value) {
        setAttributeInternal(STUDENTNAME, value);
    }

    /**
     * Gets the attribute value for Class1, using the alias name Class1.
     * @return the Class1
     */
    public String getClass1() {
        return (String)getAttributeInternal(CLASS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Class1.
     * @param value value to set the Class1
     */
    public void setClass1(String value) {
        setAttributeInternal(CLASS1, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public StudentsEOImpl getStudentsEO() {
        return (StudentsEOImpl)getAttributeInternal(STUDENTSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setStudentsEO(StudentsEOImpl value) {
        setAttributeInternal(STUDENTSEO, value);
    }


    /**
     * @param slNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number slNo) {
        return new Key(new Object[]{slNo});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl sq = new SequenceImpl("ATTEND_SEQ",getDBTransaction());
        setSlNo(sq.getSequenceNumber());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
