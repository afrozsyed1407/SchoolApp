package model_Entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 13 08:25:19 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FeesEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        RecptNo {
            public Object get(FeesEOImpl obj) {
                return obj.getRecptNo();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setRecptNo((Number)value);
            }
        }
        ,
        IssueDate {
            public Object get(FeesEOImpl obj) {
                return obj.getIssueDate();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setIssueDate((Date)value);
            }
        }
        ,
        StudentId {
            public Object get(FeesEOImpl obj) {
                return obj.getStudentId();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setStudentId((Number)value);
            }
        }
        ,
        StudentName {
            public Object get(FeesEOImpl obj) {
                return obj.getStudentName();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setStudentName((String)value);
            }
        }
        ,
        ModeOfPay {
            public Object get(FeesEOImpl obj) {
                return obj.getModeOfPay();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setModeOfPay((String)value);
            }
        }
        ,
        Details {
            public Object get(FeesEOImpl obj) {
                return obj.getDetails();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setDetails((String)value);
            }
        }
        ,
        Amount {
            public Object get(FeesEOImpl obj) {
                return obj.getAmount();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setAmount((Number)value);
            }
        }
        ,
        RecivedBy {
            public Object get(FeesEOImpl obj) {
                return obj.getRecivedBy();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setRecivedBy((String)value);
            }
        }
        ,
        Class1 {
            public Object get(FeesEOImpl obj) {
                return obj.getClass1();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setClass1((String)value);
            }
        }
        ,
        StudentsEO {
            public Object get(FeesEOImpl obj) {
                return obj.getStudentsEO();
            }

            public void put(FeesEOImpl obj, Object value) {
                obj.setStudentsEO((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FeesEOImpl object);

        public abstract void put(FeesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int RECPTNO = AttributesEnum.RecptNo.index();
    public static final int ISSUEDATE = AttributesEnum.IssueDate.index();
    public static final int STUDENTID = AttributesEnum.StudentId.index();
    public static final int STUDENTNAME = AttributesEnum.StudentName.index();
    public static final int MODEOFPAY = AttributesEnum.ModeOfPay.index();
    public static final int DETAILS = AttributesEnum.Details.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int RECIVEDBY = AttributesEnum.RecivedBy.index();
    public static final int CLASS1 = AttributesEnum.Class1.index();
    public static final int STUDENTSEO = AttributesEnum.StudentsEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FeesEOImpl() {
    }

    /**
     * Gets the attribute value for RecptNo, using the alias name RecptNo.
     * @return the RecptNo
     */
    public Number getRecptNo() {
        return (Number)getAttributeInternal(RECPTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RecptNo.
     * @param value value to set the RecptNo
     */
    public void setRecptNo(Number value) {
        setAttributeInternal(RECPTNO, value);
    }

    /**
     * Gets the attribute value for IssueDate, using the alias name IssueDate.
     * @return the IssueDate
     */
    public Date getIssueDate() {
        return (Date)getAttributeInternal(ISSUEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssueDate.
     * @param value value to set the IssueDate
     */
    public void setIssueDate(Date value) {
        setAttributeInternal(ISSUEDATE, value);
    }

    /**
     * Gets the attribute value for StudentId, using the alias name StudentId.
     * @return the StudentId
     */
    public Number getStudentId() {
        return (Number)getAttributeInternal(STUDENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StudentId.
     * @param value value to set the StudentId
     */
    public void setStudentId(Number value) {
        setAttributeInternal(STUDENTID, value);
    }

    /**
     * Gets the attribute value for StudentName, using the alias name StudentName.
     * @return the StudentName
     */
    public String getStudentName() {
        return (String)getAttributeInternal(STUDENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for StudentName.
     * @param value value to set the StudentName
     */
    public void setStudentName(String value) {
        setAttributeInternal(STUDENTNAME, value);
    }

    /**
     * Gets the attribute value for ModeOfPay, using the alias name ModeOfPay.
     * @return the ModeOfPay
     */
    public String getModeOfPay() {
        return (String)getAttributeInternal(MODEOFPAY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModeOfPay.
     * @param value value to set the ModeOfPay
     */
    public void setModeOfPay(String value) {
        setAttributeInternal(MODEOFPAY, value);
    }

    /**
     * Gets the attribute value for Details, using the alias name Details.
     * @return the Details
     */
    public String getDetails() {
        return (String)getAttributeInternal(DETAILS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Details.
     * @param value value to set the Details
     */
    public void setDetails(String value) {
        setAttributeInternal(DETAILS, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the Amount
     */
    public Number getAmount() {
        return (Number)getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(Number value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for RecivedBy, using the alias name RecivedBy.
     * @return the RecivedBy
     */
    public String getRecivedBy() {
        return (String)getAttributeInternal(RECIVEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for RecivedBy.
     * @param value value to set the RecivedBy
     */
    public void setRecivedBy(String value) {
        setAttributeInternal(RECIVEDBY, value);
    }

    /**
     * Gets the attribute value for Class1, using the alias name Class1.
     * @return the Class1
     */
    public String getClass1() {
        return (String)getAttributeInternal(CLASS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Class1.
     * @param value value to set the Class1
     */
    public void setClass1(String value) {
        setAttributeInternal(CLASS1, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getStudentsEO() {
        return (EntityImpl)getAttributeInternal(STUDENTSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setStudentsEO(EntityImpl value) {
        setAttributeInternal(STUDENTSEO, value);
    }

    /**
     * @param recptNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number recptNo) {
        return new Key(new Object[]{recptNo});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model_Entity.FeesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl se = new SequenceImpl("RECPT_SEQ",getDBTransaction());
        this.setRecptNo(se.getSequenceNumber());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
